#!/usr/bin/perl

# Transforms the markdown source that you edit into an intermediate
# markdown stream that is ready for pandoc. Don't edit the output!
# Just give it to pandoc to produce the final HTML.
#
# What are the changes?
#
# * Source code blocks are made different from inline code:
#   opening code fence (```) -->  <pre><code class="source">
#   closing code fence --> </code></pre>
#
# * Defined term links are changed into <span> and <a> elements,
#   which puts the dots before and after a defined term:
#   [defined term](#def) -->
#   <span class="termRef"><a href="def-defined-term"> ...
#
# * Defined terms in the glossary become anchors:
#   | Defined term | definition | -->
#   | <a name="def-defined-term">Defined term</a> | definition |
#
# * Rules get an anchor; rule name and NIEM 5 crossref are removed:
#   **Rule 0-0:** Rule name || Rule text. (N5R 1-1) -->
#   <a name="rule0-0"></a>**Rule 0-0:** Rule text.

use warnings;
use strict;

my $openFence = 1;
my $line = 0;
my %terms;

# Copy everything up to the start of the glossary section
while (<>) {
  $line++;
  print;
  last if m/^#+ .*Glossary/;
}
# Now skip to the glossary definitions table header: | :--- | :--- |
while (<>) {
  $line++;
  print;
  last if m/^\|\s*[:-]+\s*\|\s*[:-]+\s*\|/;
}
# Process each line in the glossary definitions table
while (<>) {
  $line++;
  print, last  if /^#/;        # found next section; glossary all done
  print, next if /^\s*$/;      # blank line
  if (m/^\|([^|]*)\|([^|]*)\|/) {
    my $def  = trim($2);
    my $term = lc trim($1);
    my $href = lc trim($1);
    $href =~ s/ +/-/g;
    $href = "def-$href";
    printf "| <a name=\"%s\"></a>%s | %s |\n", $href, $term, $def;
    $terms{$term} = $href;
  }
  else {
    print STDERR "bad glossary format at line $line\n";
    print;
  }
}
# Process the rest of the markdown source
while (<>) {
  $line++;

  # Replace each defined term reference in the current line;
  # for example: [atomic class](#def)
  while (m/\[([^]]+)\]\(#def\)/g) {
    my $si    = $-[0];        # beginning index of defined term ref
    my $ei    = $+[0];        # ending index of defined term ref
    my $mlen  = $ei - $si;    # length of defined term ref
    my $ttxt  = $1;           # text of defined term; eg. "atomic class"
    my $term  = lc $1;        # defined term, all lowercase
    $term =~ s/[^\s\w]//g;    # remove everything but spaces and word chars

    my $href = $terms{$term}; # look up href for this term
    if (!defined $href) {
      $term =~ s/s$//;        # can't find "documents"? try "document"
      $href = $terms{$term};
    }
    if (defined $href) {
      my $rep = "[<span class=\"termRef\">$ttxt</span>](#$href)";
      substr($_, $si, $mlen) = $rep;
    }
    else {
      my $rep = "[<span class=\"termRef\">$ttxt</span>]()";
      substr($_, $si, $mlen) = $rep;
      printf STDERR "no definition for %s at line %d\n", $term, $line;
    }
  }
  # Add anchor to rules; remove rule name and (N5R) crossref
  if (m/^\*\*Rule (\d+-\d+):\*\*\s+/) {
    my $anchor = sprintf('<a name="rule%s"></a>',$1);
    s/^/$anchor/;
    s/:\*\*\s*.*\|\|\s*/:** /;
    s/\s*\(NEW\)\s*$/\n/;
    s/\s*\(N5R [^)]+\)\s*$/\n/;
  }
  # Replace each reference link in the current line;
  # for example: [webarch](#ref)
  while (m/\[+([^]]+)\]+\(#ref\)/g) {
    my $si    = $-[0];        # beginning index of reference
    my $ei    = $+[0];        # ending index of reference
    my $mlen  = $ei - $si;    # length of reference
    my $ttxt  = $1;           # text of reference; eg. "webarch"
    my $href  = lc $1;        # reference, all lowercase
    $href =~ s/[\W]//g;       # reference, only word chars

    my $repl = sprintf("<a href=\"#%s\"><b>[%s]</b></a>", $href, $ttxt);
    substr($_, $si, $mlen) = $repl;
  }
  print;
}

sub trim {
  my ($rv) = @_;
  $rv =~ s/^\s+//;
  $rv =~ s/\s+$//;
  return $rv;
}
