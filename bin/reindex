#!/usr/bin/perl

# Run this to correct the rule numbers in the markdown source.
# Also corrects the text and anchor in rule links.
# Also refreshes the index of rules and the NIEM 5 to 6 map in
# the appendices.
#
# Syntax of a rule in the markdown source is:
#
# **Rule 1-1 (CMF,XSD)(Constraint):** rule name || rule text. (N5R 1-1)
# **Rule 1-1:** rule name || rule text. (N5R 1-1)

use warnings;
use strict;

my $lnum  = 0;                  # line number of last source line read
my @lines;                      # remember source lines for 2nd pass
my %ruleCt;                     # last rule number seen, by section
my %ruleMap;                    # map of old rule tags to new tags
my %ruleName;                   # map of new rule tag to rule name
my %n5Map;                      # map of NIEM 5 rule to new rule tag
my @rules;                      # ordered list of new rule tags
my @newRules;                   # rule tags w/o corresponding NIEM 5 rule

my %figCt;                      # last figure number seen, by section
my %figMap;                     # map of old figure tags to new tags
my %figCap;                     # map of new figure tag to caption
my @figList;                    # list of new figure tags in order

# First pass through source
# Renumber rules and figures, and remember what you did (for second pass)

while (<>) {
  $lnum++;

  # Handle rule lines in source
  if (m/^\*\*Rule /) {
    if (!m/^\*\*Rule (\d+)-(\d+):\*\*\s+(.+)\s\|\|\s+/) {
      print STDERR "Bad rule syntax at line $lnum\n";
    }
    else {
      my $sect  = $1;           # section number
      my $onum  = $2;           # current rule number in section
      my $rname = $3;           # rule name
      my $rest  = $';
      my $otag  = "$1-$2";      # rule tag eg. 7-1
      my $nnum  = ++$ruleCt{$sect}; # new rule number
      my $ntag  = "$sect-$nnum";    # new rule tag

      # print STDERR "sect=$sect\n";
      # print STDERR "onum=$onum\n";
      # print STDERR "rname=$rname\n";
      # print STDERR "otag=$otag\n";
      # print STDERR "nnum=$nnum\n";
      # print STDERR "ntag=$ntag\n";

      $ruleMap{$otag}  = $ntag;
      $ruleName{$ntag} = $rname;
      push(@rules,$ntag);

      if ($rest =~ m/\(N5R ([^)]+)\)\s*$/) {
        my @n5rs = split(/,\s*/,$1);
        foreach my $n5r (@n5rs) {
          # print "n5r=$n5r\n";
          $n5Map{$n5r} .= ",$ntag" if defined $n5Map{$n5r};
          $n5Map{$n5r}  = $ntag    unless defined $n5Map{$n5r};
        }
      }
      elsif ($rest =~ m/\(NEW\)\s*$/) {
        # print "NEW\n";
        push(@newRules,$ntag);
      }
      else {
        print STDERR "Rule with no NIEM 5 mapping at line $lnum\n";
      }
      # Fix the tag in this rule line
      if ($otag ne $ntag) {
        print STDERR "Rule $otag becomes $ntag at line $lnum\n";
        s/^\*\*Rule \d+-\d+/**Rule $ntag/;
      }
    }
  }
  # Handle figure caption lines in source
  if (m/<figcaption>/) {
    if (!m!<figcaption>(<a name="[^"]*">)Figure (\d+)-(\d+):\s*(.*)</a></figcaption>!) {
      print STDERR "Bad figure caption at line $lnum\n";
    }
    else {
      my $anch = $1;
      my $sect = $2;
      my $fnum = $3;
      my $cap  = $4;
      my $nnum = ++$figCt{$sect};
      my $otag = "$sect-$fnum";
      my $ntag = "$sect-$nnum";
      $figCap{$ntag} = $cap;
      push(@figList,$ntag);
      if ($otag ne $ntag) {
        print STDERR "Figure $otag becomes $ntag at $lnum\n";
        $figMap{$otag} = $ntag;
        s/Figure \d+-\d+:\s*/Figure $sect-$nnum: /;
        s/<a name="[^"]*">/<a name="fig$ntag">/ if m/<a name="[^"]*">/;
      }
    }
  }
  push(@lines,$_);
}

# Second pass through source
# Quit when Appendix C (index of rules) is reached.

my $line;
$lnum = 0;
while (@lines) {
  $line = shift(@lines);
  print $line;
  last if $line =~ m/^# Appendix C/;
}

# Remove old Appendix C; generate new rule index

while (@lines) {
  $line = shift(@lines);
  last if $line =~ /^# Appendix/;
}
print "\n";
foreach my $rtag (@rules) {
  my $rname = $ruleName{$rtag} || "NO NAME YET";
  print "* [Rule $rtag: $rname](#rule$rtag).\n";
}
print "\n-------\n\n$line";

# Remove old Appendix D; generate new NIEM5 -> NIEM6 map

my $niem5uri = 'https://reference.niem.gov/niem/specification/naming-and-design-rules/5.0/niem-ndr-5.0.html#rule_';

while (@lines) {
  $line = shift(@lines);
  last if $line =~ /^# Appendix/;
}
print "\n| NIEM 5 Rule | NIEM 6 Rules |\n| :--- | :--- |\n";
open(N5R, "<n5rules.txt");
while (<N5R>) {
  chop;
  tr/\r//d;
  s/\s+$//;
  m/(\d+-\d+)/;
  my $n5rule = $1;
  print "| [Rule $_]($niem5uri$n5rule) | ";

  my $n5maps = $n5Map{$n5rule};
  if (defined $n5maps) {
    my $sep = "";
    my @n6rules = split(m/,\s*/, $n5maps);
    foreach my $n6r (@n6rules) {
      print "$sep","[$n6r](#rule$n6r)";
      $sep=", ";
    }
  }
  else {
    print "*no matching NIEM6 rule*";
  }
  print " |\n";
}
print "\n-------\n\n$line";

# Remove old Appendix E; generate new index of figures

while (@lines) {
  $line = shift(@lines);
  last if $line =~ /^# Appendix/;
}
print "\n";
foreach my $ftag (@figList) {
  print "* [Figure $ftag](#fig$ftag): $figCap{$ftag}\n";
}
print "\n-------\n\n$line";

# Write out the rest of the source

foreach $line (@lines) { print $line; }
